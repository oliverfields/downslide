#!/bin/bash

# Markdown 2 pdf slides

set -e

report_error() {
  exit_code=$1
  shift 1
  echo -e "\e[31mError\e[0m: $*"
  exit $exit_code
}


report_warning() {
  echo -e "\e[33mWarning\e[0m: $*"
}


usage() {
  echo -e "\e[1mdownslide\e[0m [-c|--css <CSS_PATH>] [-p|--print-css] [-f|--force] [-h|--help] [-l|--live-rebuild] [-o|--output <OUTPUT_PATH>] [-t|--print-template] <MARKDOWN_PATH>"
}


help_msg() {
  echo -e '
Create HTML slides from markdown.

https://github.com/oliverfields/downslide


\e[1mMarkdown\e[0m

Slides are formatted with Python-Markdown, an implementation of John Gruberâ€™s Markdown. Slides are separated with lines containing only three dashes (---).


\e[1mFront matter\e[0m

Slides may be configured using front matter. Front matter is declared by the first line being three dashes followed by lines containing key value pairs and finally a line containing three dashes.

    \e[1mExample front matter\e[0m
' | fmt

  echo -e '
        ---
        key1: value1
        keyN: valueN
        ---
        <markdown>
'

  echo -e '
All key values can be referenced in the markdown or css files as ${key} and will be replaced with the value.

Downslide reserves the following key/values for specific purposes:
' | fmt

  echo -e '
NAME         DEFAULT DESCRIPTION
----         ------- -----------
css          <none>  Path to CSS
description  <none>  Value for <meta> description HTML tag
loop         yes     If no, loop to first slide after last slide
output       <none>  Path to output slide HTML file
title        <file>  Value for <title> HTML tag
slide links  no      Links to each slide and show progress
localstorage no      Use localstorage to save slide state
'

echo -e '
\e[1mArguments\e[0m

    \e[1m-c. --css\e[0m <CSS_PATH>
        Use CSS from file CSS_PATH in slides

    \e[1m-p, --print-css\e[0m
        Print default CSS, useful starting point for custom CSS theme

    \e[1m-f, --force\e[0m
        Overwrite any existing slides

    \e[1m-l, --live-rebuild\e[0m
        Rebuild html when md is changed

    \e[1m-o, --output\e[0m <OUTPUT_PATH>
        Specify the Web/HTML slides file path, defaults to MARKDOWN_PATH with .html extension

    \e[1m-t, --print-template\e[0m
        Print a slide template

    \e[1m-h, --help\e[0m
        This text.

' | fmt
}


extract_attr_class_names() {
  class_names=""
  for c in $@; do
    [ "${c:0:1}" = "." ] && class_names="$class_names ${c#.}"
  done
  echo "${class_names}"
}


# Defaults
src=""
slides_path=""
overwrite_slides="no"
live_rebuild="no"
css_path=""
slides_title=""
original_args="$@"
declare -A front_matter
default_css=$(cat <<CSSEOF
/* Reset css from http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
margin: 0;
padding: 0;
border: 0;
font-size: 100%;
font: inherit;
vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
display: block;
}
body {
line-height: 1;
background-color: var(--color-bg);
color: var(--color-fg);
}
ol, ul {
list-style: none;
}
blockquote, q {
quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
content: '';
content: none;
}
table {
border-collapse: collapse;
border-spacing: 0;
}
/* end reset css */
/* default css */
:root {
--color-bg: #F8FFE5;
--color-fg: #04151F;
--color-highlight: #6D72C3;
--text-font: Georgia, serif;
--title-font: Georgia, serif;
--font-default-size: 2.6em;
--color-highlight: #2E86AB;
--slide-width: 1280px;
--slide-height: 720px;
--default-margin: 40px;
}
h1 {
font-family: var(--title-font);
font-size: 5em;
margin-top: 0;
margin-right: var(--default-margin);
margin-bottom: .5em;
margin-left: var(--default-margin);
opacity: .6;
}
strong {
font-weight: bold;
}
img {
border-radius: 1em;
margin-top: 0;
margin-right: var(--default-margin);
margin-bottom: var(--default-margin);
margin-left: var(--default-margin);
}
p {
font-size: var(--font-default-size);
font-family: var(--text-font);
line-height: 1.5em;
margin: var(--default-margin);
}
a, a:visited {
color: var(--color-highlight);
}
tbody {
border-top: solid .3em var(--color-fg);
border-bottom: solid .3em var(--color-fg);
}
th {
font-weight: bold;
}
th, td {
font-size: var(--font-default-size);
font-family: var(--text-font);
padding: .2em;
}
table {
margin: var(--default-margin);
}
ul {
list-style-type: disc;
list-style-position: inside;
margin: var(--default-margin);
}
li {
font-size: var(--font-default-size);
font-family: var(--text-font);
line-height: 1.5em;
list-style-position: outside;
margin-left: 1em;
}
ul > li > ul {
list-style-type: circle;
margin: 0;
}
ul > li > ul > li {
font-size: 1em;
margin-left: 1.5em;
}
pre {
color: var(--color-bg);
background-color: var(--color-fg);
border-radius: .5em;
font-family: courier, monospace;
margin: var(--default-margin);
font-size: 1.8em;
line-height: 1.2em;
padding: 1em;
}
.slides-title {
text-align: center;
font-size: 8em;
margin: var(--default-margin);
text-transform: uppercase;
}
.slides-sub-title {
text-align: center;
font-size: var(--font-default-size);
}
.slide {
/* Thanks for the div v and h centering: https://stackoverflow.com/a/14816807 */
width: var(--slide-width);
height: var(--slide-height);
position: absolute;
left: 0;
right: 0;
top: 0;
bottom: 0;
margin: auto;
/*Solves a problem in which the content is being cut when the div is smaller than its' wrapper:*/
max-width: 100%;
max-height: 100%;
overflow: auto;
display: none;
}
.full-width {
width: var(--slide-width);
margin: 0;
}
img.background {
width: var(--slide-width);
height: var(--slide-height);
object-fit: cover;
z-index: -1;
position: absolute;
left: 0;
top: 0;
margin: 0;
}
img.half-width, img.third-width {
height: var(--slide-height);
object-fit: cover;
margin: 0;
}
img.half-width {
width: 50%;
}
img.third-width {
width: 33%;
}
.left {
float: left;
margin-right: 2em;
}
.right {
float: right;
margin-left: 2em;
}
.slide-links {
position: absolute;
bottom: 1em;
right: 1em;
}
.slide-links span {
opacity: .3;
cursor: pointer;
font-size: 2em;
background-color: var(--color-fg);
border-radius: .2em;
width: 1em;
display: inline-block;
margin-left: .3em;
}
.slide-links .current-slide {
opacity: .6;
}
CSSEOF
)
slide_template=$(cat <<TEMPLATEEOF
---
title: Lets go
description: Travels slide deck
loop: no
slide links: yes
localstorage: no
---
---{: .title-slide }

# ${title}

---

# Example

- item 1
- item 2

TEMPLATEEOF
)

# for implicitly loops over the arguments, this effectivly captures value of last argument
for src; do true; done

[ "$src" = "" ] && usage && exit 0

case $src in
  -h|--help|-p|--print-css|-t|--print-template)
    :
  ;;
  *)
    [ -f "$src" ] || report_error 1 "File not found: $src"

    src_dir="$(dirname "$src")"

    # Read frontmatter
    first_line='yes'
    is_front_matter='no'
    while read -r line; do
      if [ "$first_line" = "yes" ]; then
        # There is front matter
        if [ "$line" = "---" ]; then
          first_line='no'
          is_front_matter='yes'
          continue
        else
          # There is no front matter
          break
        fi
      elif [ "$is_front_matter" = 'yes' ]; then
        # End of front matter
        if [ "$line" = '---' ]; then
          break
        else
          fm_key="${line%:*}"
          fm_value="${line#*:}"

          # Trim any spaces
          fm_key="${fm_key#\ *}"
          fm_key="${fm_key%*\ }"
          fm_key="${fm_key,,}" # Lower case
          fm_value="${fm_value#\ *}"
          fm_value="${fm_value%*\ }"

          if [[ -v "front_matter[$fm_key]" ]]; then
            report_warning "Front matter key '$fm_key' already defined"
          else
            front_matter["$fm_key"]="$fm_value"
          fi
        fi
      fi
    done <<<"$(cat "$src")"

    if [[ -v "front_matter[title]" ]]; then
      slides_title="${front_matter['title']}"
    else
      slides_title="$(basename "$src")"
      slides_title="${slides_title%.*}"
    fi

    if [[ -v "front_matter[output]" ]]; then
      slides_path="${front_matter['output']}"
    fi

    if [[ -v "front_matter[css]" ]]; then
      css_path="${front_matter['css']}"
    fi
  ;;
esac

# Set arguments
args=$(getopt -l "output: css: force print-css live-reload help print-template" -o "o:c:fplht" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]; do
  case $1 in
    --)
      # No more args
      shift
      break
    ;;
    -o|--output)
      [ -z "$2" ] && report_error 1 "Missing value for argument -o|--output"
      slides_path="$2"
      shift
    ;;
    -c|--css)
      [ -z "$2" ] && report_error 1 "Missing value for argument -c|--css"
      css_path="$2"
      shift
    ;;
    -f|--force)
      overwrite_slides='yes'
    ;;
    -l|--live-reload)
      live_rebuild='yes'
    ;;
    -p|--print-css)
      echo "$default_css"
      exit 0
    ;;
    -t|--print-template)
      echo "$slide_template"
      exit 0
    ;;
    -h|--help)
      usage
      help_msg
      exit 0
    ;;
  esac

  shift

done

#echo src=$src
#echo slides_path=$slides_path
#echo overwrite_slides=$overwrite_slides
#echo live_rebuild=$live_rebuild
#echo css_path=$css_path
#echo slides_title=$slides_title
#echo loop=${front_matter['loop']}
#echo description=${front_matter['description']}

if [ "$overwrite_slides" = 'no' ]; then
  [ -f "$slides_path" ] && report_error 1 "File already exists: $slides_path"
fi

if [ "$slides_path" = "" ]; then
  tgt_name="$(basename "$src")"
  tgt_name="${tgt_name%.*}"
  slides_path="$tgt_name.html"
fi

if [ "$css_path" != "" ]; then
  [ -f "$css_path" ] || report_error 1 "CSS not found: $css_path"
fi

# Generate slides html

{
  echo "<!DOCTYPE html>
<html>
<head>"

if [ -e "favicon.png" ]; then
  echo "<link rel=\"shortcut icon\" href=\"favicon.png\">"
fi

echo "<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">"

  if [[ -v "front_matter[author]" ]]; then
    echo "<meta name=\"author\" content=\"${front_matter['author']}\">"
  fi

  if [[ -v "front_matter[description]" ]]; then
    echo "<meta name=\"description\" content=\"${front_matter['description']}\">"
  fi

  echo "<title>$slides_title</title>
<style>"

  if [ -f "$css_path" ]; then
    cat "$css_path"
  else
    echo "$default_css"
  fi

  echo "</style>
</head>
<body>"

  # Strip any front matter and convert markdown to html
  first_line=''
  cat "$src" | while read -r line; do
    # Is there front matter?
    if [ "$first_line" = "" ]; then
      first_line='no'
      if [ "$line" = "---" ]; then
        is_front_matter='yes'
        continue
      else
        is_front_matter='no'
      fi
    fi

    # Are we in front matter?
    if [ "$is_front_matter" = 'yes' ]; then
      if [ "$line" = '---' ]; then
        is_front_matter='no'
      fi
      continue
    else
      echo "$line"
    fi
  done \
  | python3 -m markdown -x attr_list -x tables \
  | sed 's#<p>\(<img\ [^>]*>\)</p>#\1#g' \
  | while read -r line || [ -n "$line" ]; do # the -n bit adds new line so last line is picked up, the while loop addes divs to each slide

    if [ "${line:0:8}" = "<p>---{:" ]; then
      is_slide_class_line='yes'
      class_names="$(extract_attr_class_names "$line")"
    else
      is_slide_class_line='no'
      class_names=""
    fi

    # Need to write slide start div for first line
    if [ "$passed_first_line" = "" ]; then
      passed_first_line='yes'
      echo "<div class=\"slide$class_names\">"

      if [ "$is_slide_class_line" = "no" ]; then
        echo "$line"
      fi
      continue
    fi

    # All slides except the first
    if [[ "$is_slide_class_line" = "yes" || "$line" = "<hr />" ]]; then
      echo "</div><!-- /slide -->
<div class=\"slide$class_names\">"
    else
      echo "$line"
    fi

  done

  echo "</div><!-- /slide -->"

  echo "<script>
// Set viewport
window.onload = function() {
  var slideWidth = Number(window.getComputedStyle(document.getElementsByClassName('slide')[0]).getPropertyValue('width').replace('px', ''));
  var scale = screen.width / slideWidth;
  var viewport = document.createElement('meta');

  viewport.setAttribute('name', 'viewport');
  viewport.setAttribute('content', 'width='+slideWidth+', initial-scale='+scale);
  document.getElementsByTagName('head')[0].appendChild(viewport);
}
"

if [ "${front_matter['localstorage']}" != "yes" ]; then
  echo "function getCurrentSlideIndex() {
  if (typeof(currentSlideIndex) == 'undefined') return 0;
  return currentSlideIndex;
}


function setCurrentSlideIndex(index) {
  currentSlideIndex = Number(index);
}
"
else
  echo "function getCurrentSlideIndex() {
  currentIndex = localStorage.getItem('currentIndex');
  if (currentIndex == null) return 0;
  return Number(currentIndex);
}


function setCurrentSlideIndex(index) {
  localStorage.setItem('currentIndex', index);
  currentSlideIndex = index;
}
"
fi

echo "function nextSlide(direction) {"

if [ "${front_matter['loop']}" = "no" ]; then
  echo "  var loop = false;"
else
  echo "  var loop = true;"
fi

echo "  var nextSlideIndex = 0;

  if (direction == 'forward') {

    nextSlideIndex = currentSlideIndex + 1;

    if (loop == false && nextSlideIndex == slides.length) return

    if (nextSlideIndex == slides.length) nextSlideIndex = 0;
  }
  else if (direction == 'backward') {

    if (loop ==false && currentSlideIndex == 0) return

    nextSlideIndex = currentSlideIndex - 1;

    if (nextSlideIndex == -1) nextSlideIndex = slides.length - 1;
  }


  slides[currentSlideIndex].style.display = 'none';
  slides[nextSlideIndex].style.display = 'block';
  setCurrentSlideIndex(nextSlideIndex);
"

if [ "${front_matter['slide links']}" = "yes" ]; then
  echo "updateSlideLinks(currentSlideIndex);"
fi

echo "
}


function checkKey(e) {
  e = e || window.event;

  if (forwardKeys.includes(e.keyCode)) {
     nextSlide('forward');
  }

  if (backwardKeys.includes(e.keyCode)) {
     nextSlide('backward');
  }
}

// Change slides on click
document.addEventListener('mouseup', e => {
  // Ignore clicks on links
  if (e.target.tagName == 'A') return;

  nextSlide('forward');
})

var slides = document.getElementsByClassName('slide');
var currentSlideIndex = getCurrentSlideIndex();

var forwardKeys = [
  39, // Right arrow
  32, // Space
  13  // Enter
];

var backwardKeys = [
  37, // Left arrow
  8   // Backspace
];

// Hide all slides
Array.from(slides).forEach(
  function(element, index, array) {
    element.style.display = 'none';
  }
);

window.addEventListener('keydown', checkKey);

slides[currentSlideIndex].style.display = 'block';
"

if [ "${front_matter['slide links']}" = "yes" ]; then
  echo "
function updateSlideLinks(slideIndex) {
  var currentSlideClass = 'current-slide';
  Array.from(slideLinks.children).forEach(
    function(element, index, array) {
      if (slideIndex == index) {
        element.classList.add(currentSlideClass);
      }
      else {
        element.classList.remove(currentSlideClass);
      }
    }
  );
}


// Add slide links
var slideLinks = document.createElement('div');
slideLinks.classList.add('slide-links');
Array.from(slides).forEach(
  function(element, index, array) {
    var slideLink = document.createElement('span');
    if (index == currentSlideIndex) slideLink.classList.add('current-slide');
    slideLink.innerHTML = '&nbsp;';

    var slideTitle = element.getElementsByTagName('h1')[0];
    if (typeof slideTitle == 'undefined') slideTitle = 'Slide ' + index;
    else slideTitle = slideTitle.innerHTML;

    slideLink.setAttribute('title', slideTitle);

    slideLink.addEventListener('mouseup', e => {
      e.stopPropagation()
      slides[currentSlideIndex].style.display = 'none';
      setCurrentSlideIndex(index);
      slides[currentSlideIndex].style.display = 'block';
      updateSlideLinks(index);
    })

    slideLinks.append(slideLink);
  }
);
document.body.append(slideLinks);
"
fi

echo "
</script>
</body>
</html>"

} > "$slides_path"

# Embed local images in html
find "$src_dir" -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.gif' \) \
| sed 's/^\.\///' \
| while read -r img; do
  # Check slides contain reference to image
  grep -q "$img" "$slides_path" || continue

  img_ext="${img##*.}"
  img_ext="${img_ext,,}" # lower case
  img_b64="$(base64 --wrap=0 "$img")"

  sed -i -f - "$slides_path" << IMGEOF
s#src="${img}"#src="data:image/${img_ext};charset=utf-8;base64, ${img_b64}"#g
s#url('${img}');#url(data:image/${img_ext};base64,${img_b64});#g
IMGEOF


done

# Embed favicon
# TODO allow favicons with different name or extensions
if grep -q 'rel="shortcut icon"' "$slides_path"; then
  favicon="favicon.png"
  if [ -f "$src_dir/$favicon" ]; then
    b64="$(base64 --wrap=0 "$favicon")"

    sed -i -f - "$slides_path" << EOF
s#\(<link[^>]*\)href="$favicon"#\1href="data:image/png;charset=utf-8;base64, ${b64}"#g
EOF
  fi
fi

# Update any front matter key values in html
for key in "${!front_matter[@]}"; do
  sed_regexp="$sed_regexp;s%\${$key}%${front_matter[$key]}%g"
done
sed_regexp="${sed_regexp#;}"
sed -i "$sed_regexp" "$slides_path"


if [ "$live_rebuild" = "yes" ]; then
  # Create downslide command
  cmd="$0 --force"
  [ -f "$slides_path" ] && cmd="$cmd --output '$slides_path'"
  [ -f "$css_path" ] && cmd="$cmd --css '$css_path'"
  cmd="$cmd '$src'"
  src_dir="$(dirname "$src")"

  echo "Watching $src for changes.. Ctrl+C to quit"

  # Need to watch entire directory to handle editors like vim that actually delete the write first to a tmp file and then overwrite the original file with the tmp file. Watching the original file will fail
  inotifywait --quiet --monitor --recursive --event close_write --format "%f" "$src_dir" \
  | while read -r change; do
    if [ "$src" = "$change" ] || [ "$css_path" = "$change" ] ; then
      eval "$cmd" && echo "$(date +%T) Rebuilt $slides_path"
    fi
  done
fi
